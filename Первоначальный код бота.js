import express from 'express';
import TelegramBot from 'node-telegram-bot-api';
import { google } from 'googleapis';
import {
  PORT, TOKEN, URL_TO_BOT, URL_TO_IMG, URL_TO_SITE,
} from './config.js';
import { getAuthClient } from './auth.cjs';

const puk = getAuthClient();
const app = express();
const bot = new TelegramBot(TOKEN, {
  polling: true,
});
const ANSWER_DELAY = 1000;

const commands = [

  { command: 'start', description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞' },
  { command: 'ref', description: '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É' },
  { command: 'help', description: '–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏' },
  { command: 'link', description: '–°—Å—ã–ª–∫–∞' },
  { command: 'menu', description: '–ú–µ–Ω—é-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞' },
  { command: 'second_menu', description: '–í—Ç–æ—Ä–æ–µ –º–µ–Ω—é' },

];
bot.setMyCommands(commands);

// const getApiClient = async () => {
//   const authClient = await getAuthClient();
//   const { spreadsheets: apiClient } = google.sheets({
//     version: 'v4',
//     auth: authClient,
//   });
//
//   return apiClient;
// };
// const getValuesData = async (apiClient, range) => {
//   const { data } = await apiClient.get({
//     spreadsheetId: '1vSacoq7cnVCIc7UXeLzfoL8IZNbc4ejHwOs8Fnxiv0Q',
//     ranges: range,
//     fields: 'sheets',
//     includeGridData: true,
//   });
//
//   return data.sheets;
// };
//
// const findRowIndex = (sheet, message) => {
//   const rowIndex = sheet.data[0].rowData.findIndex((item) => (
//     item.values[0].formattedValue === message
//   ));
//
//   return rowIndex;
// };
// const saysProductStatistics = async (ctx) => {
//   const range = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º';
//   const message = ctx.message.text;
//   const apiClient = await getApiClient();
//   const [sheet] = await getValuesData(apiClient, range);
//   const rowIndex = findRowIndex(sheet, message);
//   const product = sheet.data[0].rowData[rowIndex].values[2].formattedValue;
//
//   ctx.reply(`–ì–æ—Å–ø–æ–¥–∏–Ω, —Ç—ã —Å—ä–µ–ª —Ç–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç, –∫–∞–∫ ${product}.`);
// };

bot.on('text', async (msg) => {
  try {
    if (msg.text.startsWith('/start')) {
      await bot.sendMessage(msg.chat.id, '–°–ª—É—à–∞—é-—Å, –≤–∞—à–µ –±–ª–∞–≥–æ—Ä–æ–¥–∏–µ!');
      if (msg.text.length > 6) {
        const refID = msg.text.slice(7);
        await bot.sendMessage(msg.chat.id, `–í–∞—à–µ –±–ª–∞–≥–æ—Ä–æ–¥–∏–µ –∑–∞—à–ª–æ –ø–æ —Å—Å—ã–ª–∫–µ –≥–æ—Å–ø–æ–¥–∏–Ω–∞ —Å ID ${refID}`);
      }
    } else if (msg.text === '/ref') {
      await bot.sendMessage(msg.chat.id, `${URL_TO_BOT}?start=${msg.from.id}`);
    } else if (msg.text === '/help') {
      await bot.sendMessage(msg.chat.id, '–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ <a'
            + ' href="https://evan-gcrm.livejournal.com/840114.html">—Ç–µ–±–µ, –≥–æ—Å–ø–æ–¥–∏–Ω</a>', {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
      });
    } else if (msg.text === '/link') {
      await bot.sendMessage(msg.chat.id, '–ì–æ—Å–ø–æ–¥–∏–Ω, —Ç—ã–∫–Ω–∏ –ø–µ—Ä—Å—Ç–æ–º —Å–≤–æ–∏–º <a'
          + ` href="${URL_TO_SITE}">—Å—é–¥–∞</a>`, {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
      });
    } else if (msg.text === '/menu') {
      await bot.sendMessage(msg.chat.id, '–ú–µ–Ω—é –±–æ—Ç–∞', {
        reply_markup: {
          keyboard: [
            ['üê± –î–æ–±–∞–≤–∏—Ç—å', 'üê† –£–¥–∞–ª–∏—Ç—å'],
            ['üê∑ –ü—É–∫–Ω—É—Ç—å', 'üêô –•–æ—á—É –∫–∞—Ä—Ç–∏–Ω–∫—É'],
            ['‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é'],
          ],
          resize_keyboard: true,
        },
      });
    } else if (msg.text === 'üê± –î–æ–±–∞–≤–∏—Ç—å') {
      await bot.sendMessage(msg.chat.id, '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É', {
        reply_markup: {
          remove_keyboard: true,
        },
      });
    } else if (msg.text === 'üê∑ –ü—É–∫–Ω—É—Ç—å') {
      await bot.sendMessage(msg.chat.id, '–ü—É–∫–Ω—É–ª –≤ –ª—É–∂—É', {
        reply_markup: {
          remove_keyboard: true,
        },
      });
    } else if (msg.text === 'üê† –£–¥–∞–ª–∏—Ç—å') {
      await bot.sendMessage(msg.chat.id, '–£–¥–∞–ª–µ–Ω–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã', {
        reply_markup: {
          remove_keyboard: true,
        },
      });
    } else if (msg.text === 'üêô –•–æ—á—É –∫–∞—Ä—Ç–∏–Ω–∫—É') {
      await bot.sendPhoto(msg.chat.id, URL_TO_IMG, {
        caption: '<b>–î–µ—Ä–∂–∏—Ç–µ, –í–∞—à–µ –±–ª–∞–≥–æ—Ä–æ–¥–∏–µ</b>',
        parse_mode: 'HTML',
      });
    } else if (msg.text === '‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é') {
      await bot.sendMessage(msg.chat.id, '–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ', {
        reply_markup: {
          remove_keyboard: true,
        },
      });
    } else if (msg.text === '/second_menu') {
      await bot.sendMessage(msg.chat.id, '–í—Ç–æ—Ä–æ–µ –º–µ–Ω—é', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–¢—Ä–∞—Ç—ã –≤ –¥–µ–Ω—å', callback_data: 'expensesPerDay' }, { text: '–¢—Ä–∞—Ç—ã –≤ –º–µ—Å—è—Ü', callback_data: 'expensesPerMonth' }],
            [{ text: '–¢—Ä–∞—Ç—ã –∑–∞ –≥–æ–¥', callback_data: 'expensesPerYear' }],
            [{ text: '–î–æ—Ö–æ–¥—ã', callback_data: 'income' }],
            [{ text: '–ó–∞–∫—Ä—ã—Ç—å –ú–µ–Ω—é', callback_data: 'closeMenu' }],
          ],
        },
        reply_to_message_id: msg.message_id,
      });
    } else {
      const msgWait = await bot.sendMessage(msg.chat.id, '–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º—Å—è —Å–æ –≤—Å–µ–º–∏—Ä–Ω—ã–º —Ä–∞–∑—É–º–æ–º...');
      setTimeout(async () => {
        await bot.editMessageText(msg.text, {
          chat_id: msgWait.chat.id, message_id: msgWait.message_id,
        });
      }, ANSWER_DELAY);
    }
  } catch (error) {
    console.log(error);
    bot.sendMessage(
      msg.chat.id,
      '–ì–æ—Å–ø–æ–¥–∏–Ω, –∫–∞—Ä–µ—Ç–∞ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∞—Å—å –≤ —Ç—ã–∫–≤—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ <a href="https://t.me/VictoriaShuya">–°–æ–∑–¥–∞—Ç–µ–ª—é</a> –∑–∞'
        + ' –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
      {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
      },
    );
  }
});
bot.on('photo', async (img) => {
  try {
    await bot.sendMessage(img.chat.id, '–ë–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤—É—é');
    await bot.downloadFile(img.photo[img.photo.length - 1].file_id, './image');
  } catch (error) {
    console.log(error);
    bot.sendMessage(
      img.chat.id,
      '–ì–æ—Å–ø–æ–¥–∏–Ω, –∫–∞—Ä–µ—Ç–∞ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∞—Å—å –≤ —Ç—ã–∫–≤—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ <a href="https://t.me/VictoriaShuya">–°–æ–∑–¥–∞—Ç–µ–ª—é</a> –∑–∞'
          + ' –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
      {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
      },
    );
  }
});
bot.on('callback_query', async (ctx) => {
  try {
    switch (ctx.data) {
      case 'closeMenu':
        await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id);
        await bot.deleteMessage(ctx.message.reply_to_message.chat.id, ctx.message.reply_to_message.message_id);
        break;
      default:
        break;
    }
  } catch (error) {
    console.log(error);
    bot.sendMessage(
      ctx.message.chat.id,
      '–ì–æ—Å–ø–æ–¥–∏–Ω, –∫–∞—Ä–µ—Ç–∞ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∞—Å—å –≤ —Ç—ã–∫–≤—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ <a href="https://t.me/VictoriaShuya">–°–æ–∑–¥–∞—Ç–µ–ª—é</a> –∑–∞'
      + ' –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
      {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
      },
    );
  }
});
bot.on('polling_error', (err) => console.log(err.data.error.message));
app.listen(PORT, () => console.log(`My server is running on port ${PORT}`));
